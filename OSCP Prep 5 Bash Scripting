Prerequisites:
optional extension .sh //must have shebang - #!/bin/bash //must - execution permissions

#5.2 Variables  -->  name=value declaration. There are no spaces before or after the “=” sign
first_name=Good
last_name=Hacker
echo $first_name $last_name   --> Good Hacker

greeting='Hello World'
echo $greeting  --> Hello World

user=$(whoami)
echo $user  --> kali

#!/bin/bash -x      # adding in the -x flag instructed Bash to print additional debug output


#Special Bash Variables:
Variable Name   Description
$0              The name of the Bash script
$1 - $9         The first 9 arguments to the Bash script
$#              Number of arguments passed to the Bash script
$@              All arguments passed to the Bash script
$?              The exit status of the most recently run process
$$              The process ID of the current script
$USER           The username of the user running the script
$HOSTNAME       The hostname of the machine
$RANDOM         A random number
$LINENO         The current line number in the script

#Collecting user input using read
read answer
echo "Your answer was $answer"
## -p, which allows us to specify a prompt, and -s, which makes the user input silent   #ex:// user -p --> read username// pass -sp --> read pass and don't show it while reading

#5.3 If, Else, Elif Statements
if [ <some test> ]
then
<perform an action>
fi

cat ./if.sh
#!/bin/bash
# if statement example
read -p "What is your age: " age
if [ $age -lt 16 ]
then
echo "You might need parental permission to take this course!"
fi

#Common test command operators
Operator                Description: Expression True if…
!EXPRESSION             The EXPRESSION is false.
-n STRING               STRING length is greater than zero
-z STRING               The length of STRING is zero (empty)
STRING1 != STRING2      STRING1 is not equal to STRING2
STRING1 = STRING2       STRING1 is equal to STRING2
INTEGER1 -eq INTEGER2   INTEGER1 is equal to INTEGER2
INTEGER1 -ne INTEGER2   INTEGER1 is not equal to INTEGER2
INTEGER1 -gt INTEGER2   INTEGER1 is greater than INTEGER2
INTEGER1 -lt INTEGER2   INTEGER1 is less than INTEGER2
INTEGER1 -ge INTEGER2   INTEGER1 is greater than or equal to INTEGER 2
INTEGER1 -le INTEGER2   INTEGER1 is less than or equal to INTEGER 2
-d FILE                 FILE exists and is a directory
-e FILE                 FILE exists
-r FILE                 FILE exists and has read permission
-s FILE                 FILE exists and it is not empty
-w FILE                 FILE exists and has write permission
-x FILE                 FILE exists and has execute permission

# if + else
if [ <some test> ]
then
<perform action>
else
<perform another action>
fi

#5.4 Boolean Logical Operations
user2=kali
grep $user2 /etc/passwd && echo "$user2 found!"   --> the row with info + kali found!

echo $user2   -->   bob
grep $user2 /etc/passwd && echo "$user2 found!" || echo "$user2 not found!"   -->   bob not found!

#5.5 Loops
#General syntax of the for loop:
for var-name in <list>
do
<action to perform>
done

#print 10 ip-s:
#ex1 (using loop):
for ip in $(seq 1 10); do echo 10.11.1.$ip; done
#ex2 (using range):
for i in {1..10}; do echo 10.11.1.$i;done

# While Loop
while [ <some test> ]
do
<perform an action>
done

#5.6 Functions

#ex1:
function function_name {
commands...
}

#ex2:
function_name () {
commands...
}







